---

- name: Get the postgres pod information
  k8s_info:
    kind: Pod
    namespace: '{{ meta.namespace }}'
    label_selectors:
      - "app={{ deployment_type }}-postgres"
  register: postgres_pod
  until: "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
  delay: 5
  retries: 60

- name: Set the resource pod name as a variable.
  set_fact:
    postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"


- name: Set pg_dump command
  set_fact: 
    pgdump: |
      pg_dump -h {{ tower_old_postgres_host }}
      -U {{ tower_old_postgres_user }}
      -d {{ tower_old_postgres_database }}
      -p {{ tower_old_postgres_port }}

- name: Set pg_restore command
  set_fact: 
    psql_restore: |
      psql -U {{ awx_postgres_user }} 
      -d {{ awx_postgres_database }}
      -p {{ awx_postgres_port }}

- name: Stream backup from pg_dump to the new postgresql container
  community.kubernetes.k8s_exec:
    namespace: "{{ meta.namespace }}"
    pod: "{{ postgres_pod_name }}"
    command: >-
      {{ pgdump }} | PGPASSWORD={{ awx_postgres_pass }} {{ psql_restore }}
  environment:
    PGPASSWORD: "{{ tower_old_postgres_password }}"
  ignore_errors: true
  register: data_migration
  # changed_when: success_condition?
